// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model Video {
  id              String           @id @unique @default(uuid())
  title           String
  description     String
  display         Boolean          @default(true)
  thumbnailUrl    String
  videoUrl        String
  teaserUrl       String
  isPublic        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  nbViews         Int              @default(0)
  duration        Int
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      String
  users_favorites User[]           @relation("users_favorites")
  tags            Tag[]
  sectionsStatics Section_Static[]
}

model Category {
  id              String            @id @unique @default(uuid())
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  videos          Video[]
  sectionsDynamic Section_Dynamic[]
}

model User {
  id               String  @id @unique @default(uuid())
  firstname        String
  lastname         String
  username         String  @unique
  email            String  @unique
  password         String
  imageUrl         String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  role             Role    @default(USER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  favorites_videos Video[] @relation("users_favorites")
}

model Tag {
  id              String  @id @unique @default(uuid())
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  videos Video[]
}

model Section_Dynamic {
  id                   String      @id @unique @default(uuid())
  title                String
  description          String
  max                  Int         @default(10)
  isGrid               Boolean     @default(false)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  categories           Category    @relation(fields: [categoryId], references: [id])
  categoryId           String
  pagesSectionsDynamic Pages_Sections_Dynamics[]
}

model Section_Static {
  id                  String      @id @unique @default(uuid())
  title               String
  description         String
  isHero              Boolean     @default(false)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  videos              Video[]
  pagesSectionsStatic Pages_Sections_Statics[]
}

model Page {
  id                   String                    @id @unique @default(uuid())
  title                String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  pagesSectionsStatic  Pages_Sections_Statics[]
  pagesSectionsDynamic Pages_Sections_Dynamics[]
  pagesAdvertisings    Pages_Advertisings[]
}

model Pages_Sections_Statics {
  id               String         @id @unique @default(uuid())
  position         Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  sectionsStatics  Section_Static @relation(fields: [sectionsStaticId], references: [id])
  sectionsStaticId String
  pages            Page           @relation(fields: [pageId], references: [id])
  pageId           String
}

model Pages_Sections_Dynamics {
  id                String          @id @unique @default(uuid())
  position          Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  pages             Page            @relation(fields: [pageId], references: [id])
  pageId            String
  sectionsDynamic   Section_Dynamic @relation(fields: [sectionsDynamicId], references: [id])
  sectionsDynamicId String
}

model Advertising {
  id                String      @id @unique @default(uuid())
  title             String
  description       String
  imageUrl          String
  linkTo            String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  pagesAdvertisings Pages_Advertisings[]
}

model Pages_Advertisings {
  id            String      @id @unique @default(uuid())
  position      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pages         Page        @relation(fields: [pageId], references: [id])
  pageId        String
  advertisings  Advertising @relation(fields: [advertisingId], references: [id])
  advertisingId String
}

enum Role {
  ADMIN
  USER
  SUPER_ADMIN
}
